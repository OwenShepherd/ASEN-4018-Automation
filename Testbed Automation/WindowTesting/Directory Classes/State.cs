using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;



namespace ASEN
{
    class State
    {
        public double RCWS_EXPT; // Exposure time for the RCWS [microseconds]
        public double SHA_EXPT; // Exposure time for the SHA [microseconds]
        public double RCWS_DFORE; // RCWS Foreward defocus distance [micro-meters] 
        public double RCWS_DAFT; // RCWS Aftward defocus distance [micro-meters]
        public decimal MA_X; // Mirror 2 x-displacement [arc-seconds]
        public decimal MA_Y; // Mirror 2 y-displacement [arc-seconds]
        public string path; // Path of the state root folder
        public string cameraInUse;
        private string rootPath;
        private string[] serials;
        private ASEN_SHA currentSHA; // The object that controls interactions with the SHA
        private ASEN_ENV teensy; // The object that controls interactions with the teensy
        private ASEN_RCWS currentRCWS;
        private ASEN_MotorControl motor1;
        private object teensyLock;
        private bool READ;
        public int velocity;
        private string teensyPort;
        private string ipyPath;
        private string pyPath;
        private string RCWSPath;
        private string SHAPath;


        public State(double[] parameters, string selectedCamera, string statePath, string[] serials, string COMPort, string pythonPath, string ipythonPath)
        {
            // Collecting the state parameters from the input array
            RCWS_EXPT = parameters[0];
            SHA_EXPT = parameters[1];
            RCWS_DFORE = parameters[2];
            RCWS_DAFT = parameters[3];
            MA_X = (decimal)parameters[4];
            MA_Y = (decimal)parameters[5];
            cameraInUse = selectedCamera;
            this.serials = serials;
            this.velocity = 3200; // Velocity units are unknown / stupid...
            this.path = statePath;
            this.teensyLock = new object();
            this.teensyPort = COMPort;
            this.ipyPath = ipythonPath;
            this.pyPath = pythonPath;

            this.RCWSPath = this.path + "\\data_RCWS";
            this.SHAPath = this.path + "\\data_SHA";

            DirectoryInfo rcws = Directory.CreateDirectory(RCWSPath);
            DirectoryInfo sha = Directory.CreateDirectory(SHAPath);
        }

        public void RunState()
        {
            ASEN_RCWS currCamera = new ASEN_RCWS(cameraInUse);
            currCamera.InitializeCamera();
            


            string RCWSForePath = this.RCWSPath + "\\img_RCWS_fore.csv";
            string RCWSAftPath = this.RCWSPath + "\\img_RCWS_aft.csv";
            
            // Here's where we call the other methods
            ProcessStartInfo Py = new ProcessStartInfo();
            Py.FileName = pyPath;
            Py.Arguments = "SerialReader.py" + " " + this.path + " " + this.teensyPort;
            Py.UseShellExecute = false;// Do not use OS shell
            Py.CreateNoWindow = true; // We don't need new window
            Py.RedirectStandardOutput = true;
            Py.RedirectStandardInput = true;
            Py.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            Py.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)


            // ASEN_MotorControl Set Up
            //this.motor1 = new ASEN_MotorControl(serials[0], this.velocity);
            //ASEN_MotorControl motor2 = new ASEN_MotorControl(serials[1], this.velocity);
            //ASEN_MotorControl motor3 = new ASEN_MotorControl(serials[2], this.velocity);

            // Initializing each motor one-by-one
            //motor1.InitializeMotor();
            //motor2.InitializeMotor();
            //motor3.InitializeMotor();

            // Homing the motors first
            //motor1.HomeMotor();
            //motor2.HomeMotor();
            //motor3.HomeMotor();

            // Now we move to whatever positon we desire
            //motor1.MoveMotor(RCWS_DFORE);
            //motor2.MoveMotor(MA_X);
            //motor3.MoveMotor(MA_Y);


            
            var envProcess = Process.Start(Py);
            currCamera.Capture(RCWS_EXPT, true);
            currCamera.SaveImage(RCWSForePath);

            //motor1.MoveMotor(RCWS_DAFT);
            currCamera.Capture(RCWS_EXPT, true);
            currCamera.SaveImage(RCWSAftPath);


            envProcess.StandardInput.Close();



            /*
            // ASEN_SHA Initializing Device
            this.currentSHA = new ASEN_SHA();
            currentSHA.CameraConnectionAndSetup();
            

            
            // ASEN_Environmental
            this.teensy = new ASEN_ENV(this.teensyPort, path);
            this.READ = true;
            

            
            //currentSHA.CloseCamera();
            */


        }

        // ------------------ Functions for Parallel Threads -----------------------------
        private void TeensyParallel(ref object teensyLock)
        {

            int dataCount = 0;
            bool localREAD;

            // Storing a local variable so that we only have to lock during the updating of the bool
            lock (teensyLock)
            {
                localREAD = this.READ;
            }

            while (localREAD)
            {

                teensy.BeginTeensyRead(ref dataCount);

                // Locking to see if the image read has completed
                lock (teensyLock)
                {
                    localREAD = this.READ;
                }

            }
        }

        private void ImagingParallel()
        {

            // Here we save the image from the RCWS
            int[,] RCWSImageFORE = new int[currentRCWS.width, currentRCWS.height];

            currentRCWS.Capture(RCWS_EXPT, false);
            // currentRCWS.saveImage(); // Not implemented yet

            // Here we save the image from the SHA
            //byte[] byteData = currentSHA.GatherCameraData(SHA_EXPT);
            //float[] zerinkes = currentSHA.ProcessCameraData();



            // Moving the RCWS to the aft defocus distance
            motor1.MoveMotor(RCWS_DAFT);

            // Taking the image again
            int[,] RCWSImageAFT = new int[currentRCWS.width, currentRCWS.height];

            currentRCWS.Capture(RCWS_EXPT, false);
            // currentRCWS.saveImage();

            // Here we save the image from the SHA
            //byteData = currentSHA.GatherCameraData(SHA_EXPT);
            //zerinkes = currentSHA.ProcessCameraData();

        }


    }
}
