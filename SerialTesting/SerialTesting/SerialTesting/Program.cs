using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.IO;
using IronPython.Hosting;

namespace SerialTesting
{
    class Program
    {
        static void Main(string[] args)
        {

            /*
            //ASEN.ASEN_ENV readTest = new ASEN.ASEN_ENV("COM4", "C:\\Users\\sheph\\Documents\\ASEN-4018-Automation");

            //readTest.StartListening();
            //var ipy = Python.CreateRuntime();
            var engine = Python.CreateEngine();
            var paths = engine.GetSearchPaths();
            paths.Add(@"C:\Program Files (x86)\IronPython 2.7\Lib\site-packages");
            engine.SetSearchPaths(paths);
            dynamic scope = engine.CreateScope();
            engine.ExecuteFile("C:\\Users\\sheph\\Documents\\ASEN-4018-Automation\\SerialTesting\\SerialTesting\\SerialTesting\\SerialReader.py",scope);
            //dynamic test = ipy.UseFile();
            scope.Simple();
            Console.WriteLine("Press any key to continue....");
            Console.WriteLine();
            Console.ReadKey();
            //Task ReadDelay = Task.Factory.StartNew(() => SleeperFunction());
            */
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\sheph\AppData\Local\Programs\Python\Python36\python.exe";
            start.Arguments = @"C:\Users\sheph\Documents\Arduino\ASEN-4018-EnvSensors\Serial_Testing\serialRead.py";
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            var ourProcess = Process.Start(start);
            while (!ourProcess.StandardOutput.EndOfStream)
            {
                string line = ourProcess.StandardOutput.ReadLine();
                Console.WriteLine(line);
            }
            ourProcess.WaitForExit();

        }

        static void SleeperFunction()
        {
            for (int i = 0; i < 10000; i++)
            {
                Console.WriteLine("Hello");
            }
        }
    }
}
